<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Auto Mode Multi-player One's Game</title>
    <meta name="keywords" content="SCRUM, Agile, Kanban, Project Management, JavaScript, Ones Game" />
    <meta name="description" content="Free JavaScript Games to learn and practice Agile, SCRUM and KanBan concepts" />
    <link rel="stylesheet" href="css/default.css" />
    <link rel="stylesheet" href="../css/validationEngine.jquery.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../css/tooltip/jquery.tooltip.css" />
    <link rel="stylesheet" href="http://code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css" />
    <script src="../js/validation/jquery.validationEngine-en.js" type="text/javascript"></script>
    <script src="../js/validation/jquery.validationEngine.js" type="text/javascript"></script>
    <script src="../js/ui/jquery.ui.widget.js" type="text/javascript"></script>
    <script src="../js/jquery-1.8.3.js" type="text/javascript"></script>
    <script src="../js/jquery-ui-1.9.2.custom.js" type="text/javascript"></script>
    <script src="../js/tooltip/jquery.tooltip.js" type="text/javascript"></script>
    <script src="../js/ui/jquery.ui.slider.js" type="text/javascript"></script>
    <script src="../js/ui/jquery.ui.mouse.js" type="text/javascript"></script>
    <!--[if lte IE 8]><script language="javascript" type="text/javascript" src="../js/excanvas/excanvas.min.js"></script><![endif]-->
    <script language="javascript" type="text/javascript" src="../js/flot/jquery.flot.js"></script>
    <script language="javascript" type="text/javascript" src="../js/JSON-js/json2.js"></script>
    <script src="js/model.js" type="text/javascript"></script>
    <script src="js/utility.js" type="text/javascript"></script>
    <script src="js/data4plot.js" type="text/javascript"></script>
    <script type="text/javascript">

        /*
        The main OnesGame Object
        by default it is null
        */
        var onesGame = null;

        var data4Plot = null;
        /*
        Number of Teams in Game
        */
        var newGameTeamNumber = 4;

        /*
        maximum unit of work for any task
        */
        var maximumTaskSize = 5;

        /*
        <tr id="gameSnapshot"></tr>
        The row which is the snapshot of the whole game
        By default it is empty row
        */
        var updateElement = "#gameSnapshot";

        /*
        Boolean to set a new Game
        */
        var newGame = true;

        /*
        Boolean to set auto mode for whole game
        */
        var autoMode = true;

        /*
        Boolean to set a Sync or Non Sync game
        */
        var synchGame = true;

        /*
        Boolean to set backlog filled for teams
        other than first team
        */
        var backlogFilled = false;

        /*
        Number of One Dice in one roll
        utility counter used to enable/disable button
        utility counter for new roll
        */
        var oneDice = 0;

        /*
        This variable is number of times
        Dice are rolled
        */
        var iterationNumber = 0;

        /*
        Each team has once index
        each index is counter of one dice for that team
        */
        var onceDiceArray = new Array();

        /*
        Number of Dice for each team
        */
        var numberOfDiceArray = new Array();

        var tempOneDiceID = "";

        /*
        Delay Time in Milli Seconds for 
        Auto Mode. 
        Default value is '2' seconds
        */
        var timeDelayInMilliSecs = "2000";

        /*
        Counter of One Dice not used
        */
        var notUsedOneDice = 0;

        $(document).ready(function () {

            /*
            The autoTestButton is disabled so this mehod is not used
            */
            $('#autoTestButton').click(function () {
                setInterval(function () { autoGame() }, timeDelayInMilliSecs);
            });

            $('#gameOnlyButton').click(function () {
                $("#plotTable").toggle(false);
                $("#gameTable").toggle(true);
            });

            $('#plotOnlyButton').click(function () {
                $("#gameTable").toggle(false);
                $("#plotTable").toggle(true);
            });

            $('#plotGameButton').click(function () {
                $("#gameTable").toggle(true);
                $("#plotTable").toggle(true);
            });

            plotGraph();

            $('#newGameButton').click(function () {

                /*
                Load the popup dialog as replacement for 
                externalHtml div
                */
                $("#externalHtml").load('dialog/autoMode.html').dialog({
                    title: "Auto Mode One's Game",
                    modal: true,
                    width: 450,
                    resizable: false,
                    buttons: {
                        "Conenct": function () {
                            newGameTeamNumber = $('[name=numberOfTeams]').val();
                            timeDelayInMilliSecs = $('[name=delayInSeconds]').val();

                            maximumTaskSize = $('[name=sizeOfTask]').val();
                            for (var diceCounter = 0; diceCounter < newGameTeamNumber; diceCounter++) {
                                var tempTeamNumber = diceCounter + 1;
                                var tempInputBox = "numberOfDiceTeam-" + tempTeamNumber;
                                numberOfDiceArray[diceCounter] = $('[name=' + tempInputBox + ']').val();
                            }

                            backlogFilled = $('#backlogFilled').is(':checked');

                            /*
                            Close the Dialog
                            */
                            $(this).dialog("close");

                            /*
                            This logic can be in a function iall the function
                            function initiateGame(){}
                            */

                            $("#newGameButton").attr('disabled', 'disabled');
                            onesGame = null;
                            newGame = true;

                            // alert("roll2 clicked " + newGame);
                            $("#dice").html("<br/>");
                            $("#team_table").html("<br/>");
                            $("#finishedTasks #finished_table").html("<br/>");
                            $("#velocityTasks #velocity_table").html("<br/>");

                            $('.roller').removeAttr('disabled');
                            oneDice = 0;
                            createGame(updateElement, newGameTeamNumber);
                            newGame = false;
                            createDivForTeams();
                            $('#gameSnapshotHeader').attr('colspan', newGameTeamNumber);


                            $('#diceRollerHeader').attr('colspan', newGameTeamNumber - 1);

                            /*
                            initialize two dimensional array 
                            */
                            data4Plot.Initialize(newGameTeamNumber);
                            /* 
                            Each team has its own Dice Roller
                            disable the global dice roller and reset button
                            */
                            if (synchGame == false || autoMode == true) {
                                $("#diceRollerButton").attr('disabled', 'disabled');
                                $("#resetButton").attr('disabled', 'disabled');
                            }
                            synchDiceRolling();
                            if (autoMode == true) {
                                setInterval(function () { autoGame() }, timeDelayInMilliSecs);
                            }
                        }
                    }
                });
            });

            //resetButton
            $('#resetButton').click(function () {
                oneDice = 0;
                $("#diceRollerButton").removeAttr('disabled');

            });

            $('button.roller').live("click", function (event) {

                if (synchGame == true) {
                    synchDiceRolling();
                } else {
                    // ID of the button
                    // which generated event   
                    var sourceButtonID = "#" + $(this).attr("id");
                    nonSynchDiceRolling(sourceButtonID);
                }

            });

            // This is key to make dynamically created elements draggable
            $('img.one').live('mouseenter', function () {
                var parentID = $(this).parent().parent().attr("id");
                //alert(parentID);
                var $this = $(this);
                if (!$this.is(':data(draggable)')) {
                    $this.draggable({
                        revert: "invalid",
                        revertDuration: 0,
                        helper: 'original',
                        opacity: 0.75,
                        containment: "#" + parentID
                    });
                }

            });
        });

        function plotGraph() {

            var d1 = [[0, 0], [0, 0]];

            $.plot($("#plotPlaceHolderVelocity"), [d1]);
            $.plot($("#plotPlaceHolderWorkCompleted"), [d1]);
            $.plot($("#plotPlaceHolderWastedDice"), [d1]);
        }

        function plotVelocityGraph() {
            $.plot($("#plotPlaceHolderVelocity"), [JSON.parse(onesGame.VelocityData())], {
                series: {
                    lines: { show: true },
                    points: { show: true }
                },
                grid: { hoverable: true, clickable: true },
                yaxis: { min: -1.0 }
            });
        }

        function plotWorkCompleted() {
            /*
            Get all teams in the Game
            */
            var teamArrays = onesGame.Teams();

            switch (teamArrays.length) {
                case 1:
                    $.plot($("#plotPlaceHolderWorkCompleted"), [{ label: "Team 1", color: "red", data: JSON.parse(teamArrays[0].WorkCompletedData())}], {
                        series: {
                            lines: { show: true },
                            points: { show: true }
                        },
                        grid: { hoverable: true, clickable: true },
                        yaxis: { min: -1.0 }
                    });
                    break;
                case 2:
                    $.plot($("#plotPlaceHolderWorkCompleted"), [{ label: "Team 1", color: "red", data: JSON.parse(teamArrays[0].WorkCompletedData()) }, { label: "Team 2", color: "green", data: JSON.parse(teamArrays[1].WorkCompletedData())}], {
                        series: {
                            lines: { show: true },
                            points: { show: true }
                        },
                        grid: { hoverable: true, clickable: true },
                        yaxis: { min: -1.0 }
                    });
                    break;
                case 3:
                    $.plot($("#plotPlaceHolderWorkCompleted"), [{ label: "Team 1", color: "red", data: JSON.parse(teamArrays[0].WorkCompletedData()) }, { label: "Team 3", color: "green", data: JSON.parse(teamArrays[1].WorkCompletedData()) },
                            { label: "Team 3", color: "blue", data: JSON.parse(teamArrays[1].WorkCompletedData())}], {
                                series: {
                                    lines: { show: true },
                                    points: { show: true }
                                },
                                grid: { hoverable: true, clickable: true },
                                yaxis: { min: -1.0 }
                            });
                    break;
                case 4:
                    $.plot($("#plotPlaceHolderWorkCompleted"), [{ label: "Team 1", color: "red", data: JSON.parse(teamArrays[0].WorkCompletedData()) }, { label: "Team 2", color: "green", data: JSON.parse(teamArrays[1].WorkCompletedData()) },
                            { label: "Team 3", color: "blue", data: JSON.parse(teamArrays[2].WorkCompletedData()) }, { label: "Team 4", color: "yellow", data: JSON.parse(teamArrays[3].WorkCompletedData())}], {
                                series: {
                                    lines: { show: true },
                                    points: { show: true }
                                },
                                grid: { hoverable: true, clickable: true },
                                yaxis: { min: -1.0 }
                            });
                    break;
                case 5:
                    $.plot($("#plotPlaceHolderWorkCompleted"), [{ label: "Team 1", color: "red", data: JSON.parse(teamArrays[0].WorkCompletedData()) }, { label: "Team 2", color: "green", data: JSON.parse(teamArrays[1].WorkCompletedData()) },
                            { label: "Team 3", color: "blue", data: JSON.parse(teamArrays[2].WorkCompletedData()) }, { label: "Team 4", color: "yellow", data: JSON.parse(teamArrays[3].WorkCompletedData()) },
                            { label: "Team 5", color: "pink", data: JSON.parse(teamArrays[4].WorkCompletedData())}], {
                                series: {
                                    lines: { show: true },
                                    points: { show: true }
                                },
                                grid: { hoverable: true, clickable: true },
                                yaxis: { min: -1.0 }
                            });
                    break;
                case 6:
                    $.plot($("#plotPlaceHolderWorkCompleted"), [{ label: "Team 1", color: "red", data: JSON.parse(teamArrays[0].WorkCompletedData()) }, { label: "Team 2", color: "green", data: JSON.parse(teamArrays[1].WorkCompletedData()) },
                            { label: "Team 3", color: "blue", data: JSON.parse(teamArrays[2].WorkCompletedData()) }, { label: "Team 4", color: "yellow", data: JSON.parse(teamArrays[3].WorkCompletedData()) },
                            { label: "Team 5", color: "pink", data: JSON.parse(teamArrays[4].WorkCompletedData()) }, { label: "Team 6", color: "AliceBlue", data: JSON.parse(teamArrays[4].WorkCompletedData())}]);
                    break;
                default:
                    $.plot($("#plotPlaceHolderWorkCompleted"), [{ label: "Team 1", color: "red", data: JSON.parse(teamArrays[0].WorkCompletedData())}], {
                        series: {
                            lines: { show: true },
                            points: { show: true }
                        },
                        grid: { hoverable: true, clickable: true },
                        yaxis: { min: -1.0 }
                    });
            }
        }

        function plotWastedDice() {
            /*
            Get all teams in the Game
            */
            var teamArrays = onesGame.Teams();

            switch (teamArrays.length) {
                case 1:
                    $.plot($("#plotPlaceHolderWastedDice"), [{ label: "Team 1", color: "red", data: JSON.parse(teamArrays[0].WastedDicePlotData())}], {
                        series: {
                            lines: { show: true },
                            points: { show: true }
                        },
                        grid: { hoverable: true, clickable: true },
                        yaxis: { min: -1.0 }
                    });
                    break;
                case 2:
                    $.plot($("#plotPlaceHolderWastedDice"), [{ label: "Team 1", color: "red", data: JSON.parse(teamArrays[0].WastedDicePlotData()) }, { label: "Team 2", color: "green", data: JSON.parse(teamArrays[1].WastedDicePlotData())}], {
                        series: {
                            lines: { show: true },
                            points: { show: true }
                        },
                        grid: { hoverable: true, clickable: true },
                        yaxis: { min: -1.0 }
                    });
                    break;
                case 3:
                    $.plot($("#plotPlaceHolderWastedDice"), [{ label: "Team 1", color: "red", data: JSON.parse(teamArrays[0].WastedDicePlotData()) }, { label: "Team 3", color: "green", data: JSON.parse(teamArrays[1].WastedDicePlotData()) },
                            { label: "Team 3", color: "blue", data: JSON.parse(teamArrays[1].WastedDicePlotData())}], {
                                series: {
                                    lines: { show: true },
                                    points: { show: true }
                                },
                                grid: { hoverable: true, clickable: true },
                                yaxis: { min: -1.0 }
                            });
                    break;
                case 4:
                    $.plot($("#plotPlaceHolderWastedDice"), [{ label: "Team 1", color: "red", data: JSON.parse(teamArrays[0].WastedDicePlotData()) }, { label: "Team 2", color: "green", data: JSON.parse(teamArrays[1].WastedDicePlotData()) },
                            { label: "Team 3", color: "blue", data: JSON.parse(teamArrays[2].WastedDicePlotData()) }, { label: "Team 4", color: "yellow", data: JSON.parse(teamArrays[3].WastedDicePlotData())}], {
                                series: {
                                    lines: { show: true },
                                    points: { show: true }
                                },
                                grid: { hoverable: true, clickable: true },
                                yaxis: { min: -1.0 }
                            });
                    break;
                case 5:
                    $.plot($("#plotPlaceHolderWastedDice"), [{ label: "Team 1", color: "red", data: JSON.parse(teamArrays[0].WastedDicePlotData()) }, { label: "Team 2", color: "green", data: JSON.parse(teamArrays[1].WastedDicePlotData()) },
                            { label: "Team 3", color: "blue", data: JSON.parse(teamArrays[2].WastedDicePlotData()) }, { label: "Team 4", color: "yellow", data: JSON.parse(teamArrays[3].WastedDicePlotData()) },
                            { label: "Team 5", color: "pink", data: JSON.parse(teamArrays[4].WastedDicePlotData())}], {
                                series: {
                                    lines: { show: true },
                                    points: { show: true }
                                },
                                grid: { hoverable: true, clickable: true },
                                yaxis: { min: -1.0 }
                            });
                    break;
                case 6:
                    $.plot($("#plotPlaceHolderWastedDice"), [{ label: "Team 1", color: "red", data: JSON.parse(teamArrays[0].WastedDicePlotData()) }, { label: "Team 2", color: "green", data: JSON.parse(teamArrays[1].WastedDicePlotData()) },
                            { label: "Team 3", color: "blue", data: JSON.parse(teamArrays[2].WastedDicePlotData()) }, { label: "Team 4", color: "yellow", data: JSON.parse(teamArrays[3].WastedDicePlotData()) },
                            { label: "Team 5", color: "pink", data: JSON.parse(teamArrays[4].WastedDicePlotData()) }, { label: "Team 6", color: "AliceBlue", data: JSON.parse(teamArrays[4].WastedDicePlotData())}], {
                                series: {
                                    lines: { show: true },
                                    points: { show: true }
                                },
                                grid: { hoverable: true, clickable: true },
                                yaxis: { min: -1.0 }
                            });
                    break;
                default:
                    $.plot($("#plotPlaceHolderWastedDice"), [{ label: "Team 1", color: "red", data: JSON.parse(teamArrays[0].WastedDicePlotData())}], {
                        series: {
                            lines: { show: true },
                            points: { show: true }
                        },
                        grid: { hoverable: true, clickable: true },
                        yaxis: { min: -1.0 }
                    });
            }
        }

        /*
        This function is called at regular interval 
        to simulate auto mode
        function process single One Dice on each call
        For last One dice it calls synchDiceRolling();
        */
        function autoGame() {
            // Find all images with class one attribute
            var oneDiceImages = $(".one");

            var tempMessage = "";

            if (oneDiceImages.length > 0) {

                /* Pick the first image 
                retrieve the ID i.e. dice_2_team_0
                split the ID to get Team ID i.e 0
                */
                var imageIDSplitArray = $(oneDiceImages[0]).attr("id").split("_");

                /*
                Index 3 is the team number
                variable counter is the team number
                */
                var counter = imageIDSplitArray[3];

                var teamNumber = parseInt(counter) + 1;
                tempMessage = tempMessage + "Task from";

                /*
                Get all teams in the Game
                */
                var teamArrays = onesGame.Teams();

                /*
                get tasks for the specific team at various stages
                */
                var doneTasksArray = teamArrays[counter].Done();
                var workInProgressTasksArray = teamArrays[counter].WorkInProgress();
                var backlogTasksArray = teamArrays[counter].Backlog();

                var tempTaskID = "";

                /*
                Logic of auto mode is 
                1. Task in Done phase is of highest priority than WIP and Backlog
                2. Pick one task and finish it till it is in the backlog of next team
                */
                if (doneTasksArray.length > 0) {
                    tempTaskID = doneTasksArray[0].taskID;

                    tempMessage = tempMessage + "'Done' to next stage";

                } else if (workInProgressTasksArray.length > 0) {

                    var maximumEstimatedUnitsTemp = workInProgressTasksArray[0].maximumEstimatedUnits;
                    var numberOfUnitsCompletedTemp = workInProgressTasksArray[0].numberOfUnitsCompleted;

                    tempTaskID = workInProgressTasksArray[0].taskID;
                    if ((maximumEstimatedUnitsTemp - numberOfUnitsCompletedTemp) == 1) {
                        tempMessage = tempMessage + " 'Work In Progress' to 'Done'";
                    } else {
                        var tempIncrementedUnits = parseInt(numberOfUnitsCompletedTemp) + 1;
                        tempMessage = tempMessage + " " + numberOfUnitsCompletedTemp + "==>" + tempIncrementedUnits;
                    }
                } else if (backlogTasksArray.length > 0) {
                    //alert(backlogTasksArray[0].taskID);
                    tempTaskID = backlogTasksArray[0].taskID;

                    var maximumEstimatedUnitsTemp = backlogTasksArray[0].maximumEstimatedUnits;
                    var numberOfUnitsCompletedTemp = backlogTasksArray[0].numberOfUnitsCompleted;

                    if (maximumEstimatedUnitsTemp == 1) {
                        tempMessage = tempMessage + " 'Backlog' to 'Done'";
                    } else {
                        tempMessage = tempMessage + " 'Backlog' to 'Work In Progress'";
                    }
                } else {
                    notUsedOneDice++;
                    tempMessage = "Number of wasted Dice " + notUsedOneDice;
                    // No Need to Update the main message
                    $("#automationTest").html(tempMessage);

                    teamArrays[counter].wastedOneDice++;

                    tempMessage = "One Dice can't be used! ";
                }

                var teamNotificationDiv = "#div_team_" + counter + "_team_notification";

                //data4Plot.UpdateWastedDice(counter, 0);

                // Looking for the notification div for each team
                // "#div_team_0_team_notification"
                // It is working but text is bit too big
                $(teamNotificationDiv).html(tempMessage);

                // remove the processed One Dice
                $(oneDiceImages[0]).remove();
                // Method takes team ID team_0, task ID task-2
                onesGame.UpdateTeamTask(imageIDSplitArray[2] + "_" + imageIDSplitArray[3], tempTaskID);

                //Changed
                addVisualTeams();

                $("#finishedTasks #finished_table").html(onesGame.FinishedTasks());
                $("#velocityTasks #velocity_table").html(onesGame.Velocity());

            } else if (oneDiceImages.length == 0) {
                iterationNumber++;
                synchDiceRolling();

                if ((iterationNumber % 5) == 0) {
                    plotVelocityGraph();
                    plotWorkCompleted();
                    plotWastedDice();
                }
            }
        }

        /*
        Each team has its own Roll Dice Button
        */
        function nonSynchDiceRolling(sourceButtonID) {
            var parentID = $(sourceButtonID).parent().attr("id"); ;

            var cellIDSplitArray = parentID.split("_");
            //alert($("#" + parentID + ' _button').attr("class"));


            // Update the tag with dice 
            // div with id #team_1 containing p with id #dice
            var updateElement = "#" + parentID + "_dice";
            //alert('button.roller' + updateElement);
            updateDice(updateElement, dieRoll(Math.floor(Math.random() * 7) + 1));

            updateElement = "#" + parentID + " #team_table";

            //alert("roll1 clicked " + newGame);
            if (newGame == true) {
                createGame(updateElement, 2);
                newGame = false;
            }

            /*
            if the Dice is rolled for last team in the array
            This will call OnewGame LastTeamActivityCounter()
            which only calculates velocity for last 5 dice rolls
            */
            if (onceDiceArray.length - 1 == cellIDSplitArray[2]) {
                onesGame.LastTeamActivityCounter();
            }


            /*
            if there is one dice after the roll
            disable the dice roll button
            if there is no one dice then do nothing
            */
            if (onceDiceArray[cellIDSplitArray[2]] > 0) {
                $(sourceButtonID).attr('disabled', 'disabled');
            }
        }

        /*
        One Dice roll button for all teams
        */
        function synchDiceRolling() {

            var teamArrays = onesGame.Teams();
            var baseId = "#div_team_";
            // alert("# synchDiceRolling " + teamArrays.length);

            for (var teamCounter = 0; teamCounter < teamArrays.length; teamCounter++) {
                baseId = baseId + teamCounter + "_dice";

                //alert(baseId);
                updateDice(baseId, dieRoll(numberOfDiceArray[teamCounter]));

                baseId = "#div_team_";
            }

            // Increment the counter for each click
            onesGame.LastTeamActivityCounter();

            if (oneDice > 0) {
                $("#diceRollerButton").attr('disabled', 'disabled');
            }
        }

        function createDivForTeams() {
            var divForTeams = "";

            var teamArrays = onesGame.Teams();
            var baseId = "div_team_";

            for (var counter = 0; counter < teamArrays.length; counter++) {
                onceDiceArray[counter] = 0;
                baseId = baseId + counter;
                // alert(baseId);
                divForTeams = divForTeams + "<td>";
                divForTeams = divForTeams + "<div id='" + baseId + "'>";

                divForTeams = divForTeams + "<p id='" + baseId + "_dice'/>";

                if (synchGame == true) {
                    // do nothing
                } else {
                    divForTeams = divForTeams + "<button id='" + baseId + "_button' class='roller round button'>Roll Dice</button>";
                }

                divForTeams = divForTeams + "<p id='" + baseId + "_team_table'/>";

                // This was not adding table as sub element of p 
                // Not sure why but to overcome the problem
                // add tables to p by calling addVisualTeams()
                // after the loop
                //divForTeams = divForTeams + teamArrays[counter].Visual() + "</p>";

                //div_team_0_team_notification
                divForTeams = divForTeams + "<p id='" + baseId + "_team_notification'></p>";
                divForTeams = divForTeams + "</div>";

                divForTeams = divForTeams + "</td>";
                updateDroppable(baseId + "_team_table");

                baseId = "div_team_";
            }
            divForTeams = divForTeams + "<td><div id='finishedTasks'><p id='finished_table'/></div></td>"
            divForTeams = divForTeams + "<td><div id='velocityTasks'><p id='velocity_table'/></div></td>"

            //alert(divForTeams);
            $(updateElement).html(divForTeams);

            addVisualTeams();

            baseId = "#div_team_";
            for (var counter1 = 0; counter1 < teamArrays.length; counter1++) {
                baseId = baseId + counter1;
                updateDroppable(baseId + " " + baseId + "_team_table");
                baseId = "#div_team_";
            }
        }

        function updateTeamTables() {
            var teamArrays = onesGame.Teams();
            var baseId = "#div_team_";

            for (var counter = 0; counter < teamArrays.length; counter++) {
                baseId = baseId + counter;
                var updatedBaseId = baseId + "_team_table";

                //$("p" + baseId).replaceWith(teamArrays[counter].Visual());
                //$("p" + baseId).empty();
                //$(baseId).find(updatedBaseId).css('background-color', 'red');
                //alert($(baseId + " " + updatedBaseId).attr("id"));

                //$(baseId).find(updatedBaseId).html("<p>Test2</p>");
                //$(baseId + " " + updatedBaseId).html("<p>Test</p>");
                $("#team-" + counter + 1).html(teamArrays[counter].Visual());

                baseId = "#div_team_";
            }

            baseId = "#div_team_";
            for (var counter1 = 0; counter1 < teamArrays.length; counter1++) {
                baseId = baseId + counter1;
                updateDroppable(baseId + " " + baseId + "_team_table");
                baseId = "#div_team_";
            }
        }

        function addVisualTeams() {
            var teamArrays = onesGame.Teams();
            var baseId = "#div_team_";
            for (var counter = 0; counter < teamArrays.length; counter++) {
                baseId = baseId + counter + "_team_table";
                //alert(baseId);
                //alert(teamArrays[counter].Visual());
                $(baseId).html(teamArrays[counter].Visual());

                baseId = "#div_team_";
            }
        }

        function dieRoll(n) {
            var result = 0;
            var diceArray = new Array();
            for (i = 0; i < n; i++) {
                value = Math.floor(Math.random() * 6) + 1;
                diceArray[i] = value;
            }
            return diceArray;
        }

        // diceElement = #div_team_0_dice
        function updateDice(diceElement, diceArray) {


            var cellIDSplitArray = diceElement.split("_");
            //alert(cellIDSplitArray);

            var htmlString = "<br/>";

            /* */
            for (i = 0; i < diceArray.length; i++) {
                //alert(i + "  -->  " + diceArray[i]);
                if (diceArray[i] == 1) {
                    var diceID = "dice_" + i + "_" + cellIDSplitArray[1] + "_" + cellIDSplitArray[2];
                    //alert(diceID);
                    tempOneDiceID = diceID;
                    htmlString = htmlString + "<img src='images/dice-" + diceArray[i] + "-th-W.png' id='" + diceID + "' alt='Rolled Dice' height='32' width='32' class='one'/>  ";

                    // Incrementing number of Single Dice for a Single Team
                    oneDice = oneDice + 1;

                    // Incrementing number of Single Dice for a Multiple Teams
                    onceDiceArray[cellIDSplitArray[2]] = onceDiceArray[cellIDSplitArray[2]] + 1;
                } else {
                    htmlString = htmlString + "<img src='images/dice-" + diceArray[i] + "-th.png' alt='Rolled Dice' height='32' width='32'/>  ";
                }
            }
            $(diceElement).html(htmlString /* + "<br/>" + tempTeam.Visual()*/);
        }

        function createGame(team, numberOfTeams) {
            onesGame = new OnesGame();
            data4Plot = new Data4Plot();

            for (var i = 0; i < numberOfTeams; i++) {
                var tempTeam = createTeam(i/*Math.floor(Math.random() * 10) + 1*/);
                onesGame.AddTeam(tempTeam);

                var randomBacklog;
                if (i == 0) {
                    randomBacklog = Math.floor(Math.random() * 6) + 1;
                } else if (i > 0) {
                    if (this.backlogFilled == false) {
                        randomBacklog = 0;
                    } else {
                        randomBacklog = Math.floor(Math.random() * 6) + 1;
                    }
                }

                for (j = 0; j < randomBacklog; j++) {
                    tempTeam.AddTask(createTask());
                }
            }
        }

        function createTeam(indexToGenerateTeamColour) {
            /*
            Team Constructor
            String TeamName
            String TeamColour
            Integer Number of Dice
            Integer Number of Backlog allowed
            Boolean true/false if backlog is prefilled // relevant only to first team
            Integer Maximum size of Activity -> 7 means any activity can't take more than 7 days to finish
            */
            var tempTeam = new Team("team_" + i, getTeamColour(indexToGenerateTeamColour), Math.floor(Math.random() * 9) + 1, Math.floor(Math.random() * 6) + 1, true, maximumTaskSize);
            return tempTeam;
        }

        function createTask() {
            var tempTask = new Task(Math.floor(Math.random() * maximumTaskSize) + 1);
            return tempTask;
        }

        function updateDroppable(team) {
            //alert(team);
            var droppableObjects = $('table').find('td.droppable').droppable({

                hoverClass: "expandTD",

                drop: function (event, ui) {
                    // ID of the task on which dice is dropped
                    // cell_team_0_task-2
                    var cellIDSplitArray = $(this).attr("id").split("_");

                    onceDiceArray[cellIDSplitArray[2]] = onceDiceArray[cellIDSplitArray[2]] - 1;
                    oneDice = oneDice - 1;

                    //alert(cellIDSplitArray);

                    // Method takes team ID team_0, task ID task-2
                    onesGame.UpdateTeamTask(cellIDSplitArray[1] + "_" + cellIDSplitArray[2], cellIDSplitArray[3]);

                    //Changed
                    addVisualTeams();

                    $(ui.draggable).remove();

                    updateDroppable(team);
                    $("#finishedTasks #finished_table").html(onesGame.FinishedTasks());
                    $("#velocityTasks #velocity_table").html(onesGame.Velocity());

                    if (onceDiceArray[cellIDSplitArray[2]] < 1) {
                        $('#div_team_' + cellIDSplitArray[2] + '_button').removeAttr('disabled');
                    }

                    if (synchGame == true) {
                        if (oneDice < 1) {
                            $("#diceRollerButton").removeAttr('disabled');
                        }
                    }

                }
            });
        }
        
    </script>
</head>
<body>
    <h1 style="text-align: center;">
        Ones Game</h1>
    <h4>
        <a href="index.html">Back to Main Page</a></h4>
        <table><tr><td><button id="newGameButton" type="button" class="round button">
        New Game</button></td>
        <td><button id="gameOnlyButton" type="button" class="round button">
        Game Only</button></td>
        <td><button id="plotOnlyButton" type="button" class="round button">
        Plot Only</button></td>
        <td><button id="plotGameButton" type="button" class="round button">
        Plot and Game</button></td></tr></table>
    
    <!--
    <button id="autoTestButton" type="button" class="round button">
        AutoTest</button> -->
    <table style="width: 100%" align="center" id="gameTable">
        <caption>
            For each team tasks are moved automatically with each single One Dice with 2 seconds
            delay</caption>
        <tr>
            <th id="gameSnapshotHeader">
                Game Snapshot of All Teams
            </th>
            <th rowspan="2">
                Finished Tasks
            </th>
            <th rowspan="2">
                Velocity
            </th>
        </tr>
        <tr>
            <th id="diceRollerHeader" align="center">
                <button id="diceRollerButton" type="button" class="roller button round">
                    Roll Dice</button>
            </th>
            <th id="resetButtonHeader" align="center">
                <button id="resetButton" type="button" class="round button">
                    Reset Dice Roller</button>
            </th>
        </tr>
        <tr id="gameSnapshot">
            <!--
            <td>
            
                <div id="team_1">
                    <button id="roll" type="button" class="roller">
                        Roll Dice</button>
                    <p id="dice"/>
                    <p id="team_table"/>
                </div>
               
            </td>
             
            <td>
                <div id="finishedTasks">
                    <p id="finished_table"/>
                </div>
            </td>
            -->
        </tr>
    </table>
    <table id="plotTable">
        <tr>
            <td>
                <h4>
                    Velocity (Y Axis) vs Sprint (X Axis)</h4>
            </td>
            <td>
                <h4>
                    Unit of Work Completed by each team (Y Axis) per Sprint (X Axis)</h4>
            </td>
        </tr>
        <tr>
            <td>
                <div id="plotPlaceHolderVelocity" style="width: 600px; height: 300px;" />
            </td>
            <td>
                <div id="plotPlaceHolderWorkCompleted" style="width: 600px; height: 300px;" />
            </td>
        </tr>
        <tr>
            <td>
                <h4>
                    One Dice Wasted by each team (Y Axis) per Sprint (X Axis)</h4>
            </td>
            <td>
            </td>
        </tr>
        <tr>
            <td>
                <div id="plotPlaceHolderWastedDice" style="width: 600px; height: 300px;" />
            </td>
        </tr>
    </table>
   
    <!-- Don't Remove this div ... it is for Popup Dialog -->
    <div id="externalHtml">
    </div>
    <!-- Start of StatCounter Code for Default Guide -->
    <script type="text/javascript">
        var sc_project = 8528192;
        var sc_invisible = 1;
        var sc_security = "98ca0992";
        var scJsHost = (("https:" == document.location.protocol) ? "https://secure." : "http://www.");
        document.write("<sc" + "ript type='text/javascript' src='" + scJsHost + "statcounter.com/counter/counter.js'></" + "script>");
    </script>
    <noscript>
        <div class="statcounter">
            <a title="web statistics" href="http://statcounter.com/" target="_blank">
                <img class="statcounter" src="https://c.statcounter.com/8528192/0/98ca0992/1/" alt="web statistics" /></a></div>
    </noscript>
    <!-- End of StatCounter Code for Default Guide -->
</body>
</html>
